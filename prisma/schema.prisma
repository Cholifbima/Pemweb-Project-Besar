// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  // Note: DATABASE_URL is dynamically built from AZURE_SQL_* variables in production
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  username    String   @unique
  password    String
  fullName    String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Gaming related fields
  favoriteGames String?  // Store as JSON string
  totalSpent    Float    @default(0)
  balance       Float    @default(1000000) // Demo balance 1 juta rupiah
  
  // Relations
  orders        Order[]
  transactions  Transaction[]
  
  @@map("users")
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  gameId      String
  gameName    String
  serviceType String   // "topup" or "boost"
  packageName String
  price       Float
  status      String   @default("pending") // pending, processing, completed, failed
  paymentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("orders")
}

model Transaction {
  id          String   @id // Custom transaction ID like TRX123456789ABCDE
  userId      Int
  type        String   // "topup" or "boost"
  gameId      String
  itemId      String?  // For top-up items
  serviceId   String?  // For boost services
  amount      Float
  userGameId  String   // User's game ID
  email       String   // Email for transaction
  status      String   @default("pending") // pending, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("transactions")
}

model Game {
  id          String   @id
  name        String
  category    String
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("games")
}
