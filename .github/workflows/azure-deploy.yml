name: Build and deploy Node.js app to Azure Web App - doaibustore

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Create environment file for build
        run: |
          echo "NODE_ENV=production" >> .env
          echo "DATABASE_URL=file:./dev.db" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}" >> .env
          echo "AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}" >> .env
          echo "AZURE_AI_FORM_RECOGNIZER_ENDPOINT=${{ secrets.AZURE_AI_FORM_RECOGNIZER_ENDPOINT }}" >> .env
          echo "AZURE_AI_FORM_RECOGNIZER_KEY=${{ secrets.AZURE_AI_FORM_RECOGNIZER_KEY }}" >> .env
          echo "AZURE_STORAGE_ACCOUNT_NAME=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" >> .env
          echo "AZURE_STORAGE_ACCOUNT_KEY=${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}" >> .env
          echo "AZURE_STORAGE_CONTAINER_NAME=${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" >> .env
          echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> .env
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          # Create temp directory for deployment
          mkdir -p deployment
          
          # Copy necessary files
          cp -r .next deployment/
          cp -r public deployment/
          cp -r prisma deployment/
          cp package*.json deployment/
          cp -r node_modules deployment/
          cp -r scripts deployment/
          
          # Create web.config for Azure
          cat > deployment/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering removeServerHeader="true"/>
              </security>
              <httpErrors existingResponse="PassThrough" />
              <iisnode node_env="%node_env%" 
                       nodeProcessCountPerApplication="1"
                       maxConcurrentRequestsPerProcess="1024"
                       maxNamedPipeConnectionRetry="100"
                       namedPipeConnectionRetryDelay="250"
                       maxNamedPipeConnectionPoolSize="512"
                       maxNamedPipePooledConnectionAge="30000"
                       asyncCompletionThreadCount="0"
                       initialRequestBufferSize="4096"
                       maxRequestBufferSize="65536"
                       watchedFiles="*.js;iisnode.yml"
                       uncFileChangesPollingInterval="5000"
                       gracefulShutdownTimeout="60000"
                       loggingEnabled="true"
                       logDirectory="iisnode"
                       debuggingEnabled="false"
                       debugHeaderEnabled="false"
                       debuggerPortRange="5058-6058"
                       debuggerPathSegment="debug"
                       maxLogFileSizeInKB="128"
                       maxTotalLogFileSizeInKB="1024"
                       maxLogFiles="20"
                       devErrorsEnabled="false"
                       flushResponse="false"
                       enableXFF="false"
                       promoteServerVars=""
                       configOverrides="iisnode.yml"
                       recycleSignalEnabled="false"
                       idlePageOutTimePeriod="0" />
            </system.webServer>
          </configuration>
          EOF
          
          # Create server.js for Azure
          cat > deployment/server.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')
          
          const dev = process.env.NODE_ENV !== 'production'
          const hostname = process.env.WEBSITE_HOSTNAME || 'localhost'
          const port = process.env.PORT || 3000
          
          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true)
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            }).listen(port, (err) => {
              if (err) throw err
              console.log(`> Ready on http://${hostname}:${port}`)
            })
          })
          EOF

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deployment

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'doaibustore'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          package: . 