name: Deploy to Azure App Service

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies and build
      run: |
        echo "📦 Installing dependencies..."
        npm ci
        
        echo "🔄 Switching to Azure SQL Server schema..."
        node scripts/switch-db.js azure
        
        echo "🔧 Generating Prisma client..."
        npx prisma generate
        
        echo "🏗️ Building Next.js application..."
        npm run build
      env:
        # Environment variables for build
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
        AZURE_STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
        AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT: ${{ secrets.AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT }}
        AZURE_DOCUMENT_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOCUMENT_INTELLIGENCE_KEY }}
        SIGNALR_CONNECTION_STRING: ${{ secrets.SIGNALR_CONNECTION_STRING }}

    - name: 🧪 Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true

    - name: 📁 Create deployment package
      run: |
        echo "📦 Creating deployment package (Azure will handle npm install)..."
        
        # Remove node_modules to speed up deployment (Azure will reinstall)
        rm -rf node_modules
        
        # Copy server.js to root if it exists
        if [ -f "server.js" ]; then
          echo "✅ server.js found for Azure App Service"
        fi
        
        # Create web.config for Azure App Service
        cat > web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="server.js"/>
                </rule>
              </rules>
            </rewrite>
            <iisnode 
              node_env="production"
              nodeProcessCountPerApplication="1"
              maxConcurrentRequestsPerProcess="1024"
              watchedFiles="*.js"
              loggingEnabled="true"
              logDirectory="iisnode"
            />
            <environmentVariables>
              <add name="SCM_DO_BUILD_DURING_DEPLOYMENT" value="true" />
              <add name="WEBSITE_NODE_DEFAULT_VERSION" value="18.x" />
            </environmentVariables>
          </system.webServer>
        </configuration>
        EOF
        
        echo "📁 Package ready for deployment ($(du -sh . | cut -f1)):"
        ls -la

    - name: 🚀 Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_APP_NAME }}
        slot-name: 'Production'
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
        package: .

    - name: 🔄 Run Prisma migrations on Azure
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run database migrations
        curl -X POST "${{ secrets.AZURE_APP_URL }}/api/admin/migrate" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MIGRATION_SECRET }}" \
          -d '{"action": "migrate"}' || echo "Migration endpoint not available"
      continue-on-error: true

    - name: 🎉 Deployment Success Notification
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 App URL: ${{ secrets.AZURE_APP_URL }}"
        echo "📊 Admin Panel: ${{ secrets.AZURE_APP_URL }}/admin"
        echo "💬 Chat System: Ready"
        echo "🔐 JWT Authentication: Configured"

    - name: ❌ Deployment Failure Notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs above for details."
        echo "Common issues:"
        echo "- Environment variables not set"
        echo "- Database connection issues"
        echo "- Build errors" 