name: Deploy to Azure Web App

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Switch to Azure SQL Server schema
        run: node scripts/switch-db.js azure

      - name: Build application for Azure
        env:
          NODE_ENV: production
          # Use a dummy connection string for build-time generation
          DATABASE_URL: "sqlserver://temp:temp@localhost:1433;database=temp;encrypt=true;"
        run: |
          echo "🏗️ Building application for Azure deployment..."
          
          # Generate Prisma client with Azure SQL Server schema
          echo "📦 Generating Prisma client..."
          npx prisma generate
          
          # Verify Prisma client generation
          if [ -d "node_modules/.prisma/client" ]; then
            echo "✅ Prisma client generated successfully"
            echo "📁 Client structure:"
            ls -la node_modules/.prisma/client/ | head -10
          else
            echo "❌ Prisma client generation failed"
            exit 1
          fi
          
          # Build Next.js application
          echo "🔨 Building Next.js application..."
          npm run build
          
          # Verify build output
          if [ -d ".next" ]; then
            echo "✅ Next.js build successful"
            echo "📁 Build output:"
            ls -la .next/ | head -5
          else
            echo "❌ Next.js build failed"
            exit 1
          fi

      - name: Prepare deployment package
        run: |
          echo "📦 Preparing deployment package..."
          
          # Create deployment directory
          mkdir -p deployment
          
          # Copy built application files
          cp -r .next deployment/
          cp -r public deployment/
          cp -r prisma deployment/
          cp -r scripts deployment/
          cp package*.json deployment/
          cp next.config.js deployment/
          cp server.js deployment/
          
          # Copy essential node_modules with Prisma client
          echo "📋 Copying essential dependencies..."
          mkdir -p deployment/node_modules
          
          # Copy Prisma client (most important)
          if [ -d "node_modules/.prisma" ]; then
            cp -r node_modules/.prisma deployment/node_modules/
            echo "✅ Prisma client copied successfully"
          else
            echo "❌ Prisma client not found for copying!"
            exit 1
          fi
          
          # Copy @prisma/client
          if [ -d "node_modules/@prisma" ]; then
            cp -r node_modules/@prisma deployment/node_modules/
            echo "✅ @prisma/client copied"
          fi
          
          # Copy other essential runtime dependencies
          essential_deps=(
            "next"
            "react"
            "react-dom"
            "bcryptjs"
            "jsonwebtoken"
            "uuid"
            "sharp"
            "multer"
          )
          
          for dep in "${essential_deps[@]}"; do
            if [ -d "node_modules/$dep" ]; then
              cp -r "node_modules/$dep" deployment/node_modules/
              echo "✅ Copied $dep"
            fi
          done
          
          # Create web.config for Azure
          cat > deployment/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                node_env="production"
                nodeProcessCountPerApplication="1"
                maxConcurrentRequestsPerProcess="1024"
                watchedFiles="*.js"
                loggingEnabled="true"
                logDirectory="iisnode"
              />
            </system.webServer>
          </configuration>
          EOF
          
          # Verify deployment package
          echo "🔍 Verifying deployment package..."
          echo "📁 Deployment structure:"
          ls -la deployment/
          
          if [ -d "deployment/node_modules/.prisma/client" ]; then
            echo "✅ Prisma client verified in deployment package"
            echo "📋 Prisma client files:"
            ls -la deployment/node_modules/.prisma/client/ | head -5
          else
            echo "❌ Prisma client missing in deployment package!"
            exit 1
          fi
          
          # Create package.json for production
          cat > deployment/package.json << 'EOF'
          {
            "name": "doaibu-store-azure",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "start": "node server.js"
            },
            "dependencies": {
              "@prisma/client": "^6.9.0",
              "next": "14.2.3",
              "react": "^18",
              "react-dom": "^18",
              "bcryptjs": "^3.0.2",
              "jsonwebtoken": "^9.0.2",
              "uuid": "^11.1.0",
              "sharp": "^0.34.2",
              "multer": "^2.0.1"
            }
          }
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: deployment

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'doaibustore'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          package: . 